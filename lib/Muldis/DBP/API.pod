=pod

=encoding utf8

=head1 NAME

Muldis.DBP.API -
Virtual Database Management System for .Net

=head1 VERSION

This document is Muldis.DBP.API version 0.1.0.-9 for .Net.

=head1 SYNOPSIS

I<This documentation is pending.>

=head1 DESCRIPTION

Muldis.DBP.API is the virtual reference implementation of the B<Muldis
DBP> (B<MDBP>) library API for .Net, authority C<http://muldis.com>,
version number C<0.1.0.-9>.  It is also the main part of the human readable
authoritative formal specification of the B<MDBP> library API itself.

This document intentionally takes the form of API documentation for a
concrete .Net library named C<Muldis.DBP.API>; however,
no .Net library with that name actually exists, and it never should
exist; thus C<Muldis.DBP.API> is a I<virtual> library.

An actual concrete .Net library that implements and is fully conformant
to the B<Muldis DBP> specification is one that provides an
API that is a (possibly non-proper) superset of the API of the virtual
library defined here.  And so, any applications or other libraries
depending on the B<MDBP> should be fully portable between all such
conforming libraries, at least with respect to what the API spec defines;
furthermore, dependents should be able to programmatically discover to what
degree the entire feature set and API of the implementing library is able
to satisfy its needs and gracefully handle when they aren't met.

I<This documentation is pending.>

=head1 TERMINOLOGY

There are some terms that this document uses which may have different
meanings than what you may be used to, so here are a few notes to clarify
what they mean in this document.

=head2 value

A I<value> is an individual constant that is not fixed in time or space.
Every value is unique, eternal, and immutable; it has no address and can
not be updated.  It does not make sense to say that you are creating or
destroying or copying or mutating a I<value>, but it does make sense to say
you are I<selecting> one.  So when one appears to be testing 2 values for
equality, they are actually testing whether 2 value appearances are in fact
the same value.  Every conceivable distinct concept can be represented by a
value, whether it is a simple number or an arbitrarily complex collection.
For every value there exists at least one I<selector> by means of which
that value may manifest within a program; each selector takes the form of
either a function or a value literal syntax.  A value's fundamental
identity is itself, and does not vary with any labels applied to it.

=head2 variable

A I<variable> is a container for an appearance of a value.  It is neither
unique nor eternal nor immutable in the typical case; it does have an
address and in the typical case can be updated, meaning that over time a
variable may hold appearances of different values.  A variable can be
created, destroyed, copied, and mutated.  A variable's fundamental identity
is its address, its identity does not vary with what value appears there
nor with any labels applied to its address.

=head2 function

A I<function> is a set of instructions for mapping a set of input I<source>
values, its I<domain>, to a set of output I<result> values, its
I<codomain>, in a pure and deterministic manner.  The result value of a
function call is determined entirely by its source value, and a function is
guaranteed to give exactly the same single result value for every call with
the same source value.  A I<function> is more constrained than a
mathematical function (that it otherwise resembles) such that its I<source>
may only be a I<tuple> (a value of the C<Tuple> type) and not some other
value.  This is for the purpose of avoiding unnecessary complications.

=head2 procedure

A I<procedure> is a set of instructions for either enacting possibly
non-deterministic change over time in a set of variables or for reading
from or writing to the external environment of the application, including
its users or various external systems.  Any typical interaction with a DBMS
by a .Net application would be mediated by at least one I<procedure>.

=head2 type

A I<type> aka I<data type> is characterized by an unordered set (or just
I<set>) of values, nothing more and nothing less.  A type's fundamental
identity is the set of values that characterizes it, and that identity does
not vary with any labels applied to that set.  If and only if 2 sets of
values are the same unordered set, they characterize the same type.
Analogous to how values are conceived, every type is unique, eternal,
immutable, has no address and can not be updated.  Types are not values and
values are not types, and this is despite the fact that some values (such
as relations) are also characterized by unordered sets of other values.

=head2 singleton type

A I<singleton type> is a type that consists of exactly 1 value.

=head2 supertype / subtype / disjoint / conjoined

Take 2 arbitrary but not necessarily distinct data types, I<T1> and I<T2>.
Iff the value set of I<T1> is a superset of that of I<T2>, then I<T1> is a
I<supertype> of I<T2>, and I<T2> is a I<subtype> of I<T1>.  If additionally
the 2 types are mutually distinct, meaning I<T1> has at least 1 value that
I<T2> lacks, then I<T1> is additionally a I<proper supertype> of I<T2>, and
I<T2> is additionally a I<proper subtype> of I<T1>.
Iff 2 data types have no values in common, they are said to be I<disjoint>.
Iff 2 data types have any values in common, they are said to be I<conjoined>.

=head2 object

An I<object> (unqualified) is a .Net object; this concept does not exist
inside a DBMS virtual machine in the general case spoken to by this
document; this term is only used outside the DBMS, in regular .Net space.

=head2 class

A I<class> (unqualified) is a .Net class; this concept does not exist
inside a DBMS virtual machine in the general case spoken to by this
document; this term is only used outside the DBMS, in regular .Net space.

=head2 struct

A I<struct> (unqualified) is a .Net struct; this concept does not exist
inside a DBMS virtual machine in the general case spoken to by this
document; this term is only used outside the DBMS, in regular .Net space.

=head1 TYPES

The B<Muldis DBP> (B<MDBP>) library API for .Net formally
defines a set of I<data types> that all I<values>, being either used within
a DBMS or being passed between or shared by a DBMS and the main .Net
environment, are members of.  They define the finer details of interchange,
both for regular data and for source code, which is a kind of data.

This specification avoids defining any relationship between these types,
and officially leaves it up to each B<MDBP>-implementing library to
define for itself whether any two given types are I<conjoined> (have any
values in common) or I<disjoint> (have no values in common).  For example,
some DBMSs may consider C<Integer> to be a I<subtype> of C<Fraction> (C<42>
is a member of both) while others may consider the two types to be disjoint
(C<42> and C<42.0> do not compare as equal).  The sole exceptions are that
the C<Any> and C<None> types explicitly are a I<supertype> or I<subtype>
respectively of every other type, regardless of the implementing library,
for what that's worth.

Each B<MDBP>-implementing library is not required to support every one of
the types defined here; however, every I<value> that the library supports
passing to/from the main .Net environment must be losslessly represented
using at least one of the types defined here, and that value must be
losslessly round-trippable using all of those representations.  Note that
the C<Capsule> type is the idiomatic way for a DBMS to represent "new"
types in a consistent way.

I<This list is subject to be expanded over time.>

=head2 Any

The C<Any> type is the I<universal type>, which is the maximal data type of
the type system and consists of all values which can possibly exist.

.Net has a direct C<Any> analogy which is provided by the .Net
class C<System.Object>.

=head2 None

The C<None> type is the I<empty type>, which is the minimal data type of
the type system and consists of exactly zero values.

=head2 Boolean

A C<Boolean> value is a general purpose 2-valued logic boolean or I<truth
value>, or specifically it is one of the 2 values I<false> and I<true>.

.Net has a direct C<Boolean> analogy which is provided by the .Net
struct C<System.Boolean>.

=head2 Integer

An C<Integer> value is a general purpose exact integral number of any
magnitude, which explicitly does not represent any kind of thing in
particular, neither cardinal nor ordinal nor nominal.  It has no minimum or
maximum value.

.Net has a direct C<Integer> analogy which is provided by the .Net struct
C<System.Numerics.BigInteger>; it also provides a handful of fixed-size
integral types, of which C<System.Int32> is the most commonly used.

=head2 Fraction

A C<Fraction> value is a general purpose exact rational number of any
magnitude and precision, expressible canonically as a coprime I<numerator>
/ I<denominator> pair of C<Integer> whose I<denominator> is positive, which
explicitly does not represent any kind of thing in particular, neither
cardinal nor ordinal nor nominal.  It has no minimum or maximum value.

.Net doesn't have a native dedicated unlimited-size-fraction type but does
provide several fixed-size exact rational types such as C<System.Decimal>.

=head2 (TODO: Other Numeric Types)

I<TODO.>

=head2 Bits

A C<Bits> value is an arbitrarily-long sequence of I<bits> where each bit
is represented by an C<Integer> in the range 0..1.

.Net has a direct C<Bits> analogy which is provided by the .Net
class C<System.Collections.BitArray>.

=head2 Blob

A C<Blob> value is an arbitrarily-long sequence of I<octets> where each
octet is represented by an C<Integer> in the range 0..255.

.Net has a direct C<Blob> analogy which is an array of C<System.Byte>.

=head2 Text

A C<Text> value is characterized by an arbitrarily-long sequence of Unicode
10.0 standard I<character codepoints>, where each distinct codepoint
corresponds to a distinct integer in the set C<{0..0xD7FF,0xE000..0x10FFFF}>.

.Net has a direct C<Text> analogy which is provided by the .Net
class C<System.String>.

Every C<Text> value corresponds 1:1 with a .Net C<String> value, but a .Net
C<String> is also capable of being malformed, and contain isolated UTF-16
"surrogate" Char elements that don't correspond to valid Unicode
codepoints; such malformed .Net C<String> values are forbidden to be used
as input to C<Muldis.DBP> and no library implementing C<Muldis.DBP> may
output such a malformed .Net C<String>.  This ban also applies everywhere
a .Net C<String> may be used in the API, such as I<attribute names>.

=head2 Array

An C<Array> value is a general purpose arbitrarily-long ordered sequence of
any other, I<member> values, which explicitly does not represent any kind
of thing in particular, and is simply the sum of its members.  An C<Array>
value is dense; iff it has any members, then its first-ordered member is at
ordinal position C<0>, and its last-ordinal-positioned member is at the ordinal position
that is one less than the count of its members.  An C<Array> in the general
case may have multiple members that are the same value, and any duplicates
may or may not exist at consecutive ordinal positions.

.Net has a direct C<Array> analogy which is provided by the .Net
class C<System.Collections.Generic.List>.

=head2 Set

A C<Set> value is a general purpose arbitrarily-large unordered collection
of any other, I<member> values, which explicitly does not represent any
kind of thing in particular, and is simply the sum of its members.  A
C<Set> ensures that no 2 of its members are the same value.

.Net has a direct C<Set> analogy which is provided by the .Net
class C<System.Collections.Generic.HashSet>.

=head2 Bag

A C<Bag> value is a general purpose arbitrarily-large unordered collection
of any other, I<member> values, which explicitly does not represent any
kind of thing in particular, and is simply the sum of its members.  A
C<Bag> in the general case may have multiple members that are the same
value.

.Net has a direct C<Bag> analogy which is provided by the .Net class
C<System.Collections.Generic.Dictionary> where every dictionary value is a
positive integer.

=head2 Tuple

A C<Tuple> value is a general purpose arbitrarily-large unordered
heterogeneous collection of named I<attributes>, such that no 2 attributes
have the same I<attribute name>, which explicitly does not represent any
kind of thing in particular, and is simply the sum of its attributes.  An
attribute is conceptually a name-asset pair, the name being used to look up
the attribute in a C<Tuple>.  An I<attribute name> is an unqualified
program identifier and is conceptually a character string that is not a
C<Text> value.  In the general case each attribute of a tuple is of a
distinct data type, though multiple attributes often have the same type.
The set of attribute names of a C<Tuple> is called its I<heading>, and the
corresponding attribute assets are called its I<body>.  With respect to the
relational model of data, a I<heading> represents a predicate, for which
each I<attribute name> is a free variable, and a C<Tuple> as a whole
represents a derived proposition, where the corresponding attribute asset
values substitute for the free variables; however, any actual predicate/etc
is defined by the context of a C<Tuple> value and a C<Tuple> in isolation
explicitly does not represent any proposition in particular.

The canonical way to represent the concept of a I<tuple> that has ordered
attributes is to use integral names; to be specific, the attribute name
consisting of just the character codepoint 0 would mark the first ordered
attribute, the name consisting of just the codepoint 1 would mark the
second, and so on; this can be repeated up to 32 "positional" names whose
names would correspond to non-printing Unicode codepoints and would
alphabetically sort correctly and prior to any normal text-like attribute
names like C<name> or C<age>; said first 32 would likewise be distinct in
appearance from all regular printable numbers used as attribute names.

.Net has a direct C<Tuple> analogy which is "anonymous types"; it also
provides support for an unlimited number of attributes with the .Net class
C<System.Collections.Generic.Dictionary> where every dictionary key is a
string; it also provides a handful of fixed-degree ordered-attribute tuple
types via C<System.Tuple>.

=head2 Heading

I<TODO.>

=head2 Tuple_Array

I<TODO.>

=head2 Relation

I<TODO.>

=head2 Tuple_Bag

I<TODO.>

=head2 Capsule

I<TODO.>

=head2 Handle

A C<Handle> value is an opaque and transient reference to an entity or
resource that potentially exists at arms length from the current in-DBMS
process or DBMS environment or that otherwise has the potential to mutate
in a way visible to the current process either due to or independent of the
actions of said process.  C<Handle> has multiple specialized subtypes
including: C<Variable>, C<Process>, C<Stream>, C<External>.

=head2 Variable

A C<Variable> value is an opaque and transient reference to an in-DBMS
I<variable> (the latter being a container for an appearance of a value).
A .Net application would use a C<Variable> as the means to return
information from a database to the main application, by using a C<Variable>
as an argument to an in-DBMS procedure call.

.Net has a direct C<Variable> analogy which is provided by any .Net
I<reference type>, or an object with one property of a reference type.

=head2 Process

A C<Process> value is an opaque and transient reference to a I<process>
running inside the DBMS environment, which typically has its own autonomous
transactional context.  Each I<process> might be either self-contained or
be a proxy for some entity outside the DBMS environment.  A typical .Net
application would use a distinct C<Process> for each conceptually
independent distinct instance of a DBMS "connection".

=head2 Stream

A C<Stream> value is an opaque and transient reference to a I<stream>,
which represents streaming data such as from/to user I/O or the filesystem
or network services etc.

=head2 External

An C<External> value is an opaque and transient reference to an entity that
is defined and managed externally to the DBMS environment, either
internally to the DBMS host implementation or in some peer language that it
mediates.  The C<External> type is useful for when you want the DBMS to
manage native .Net objects to the extent that it is capable of; the DBMS
would treat each C<External> value as a black box to pass around, but not
to operate on, except by means of special routines .Net provides to it.
An C<External> value can in general only exist in the memory of the .Net
application process using the B<MDBP>-implementing library.

=head2 Excuse

An C<Excuse> value is an explicitly stated reason for why, given some
particular problem domain, a value is not being used that is ordinary for
that domain.  For example, the typical integer division operation is not
defined to give an integer result when the divisor is zero, and so a
function for integer division could be defined to result in an C<Excuse>
value rather than throw an exception in that case.  For another example, an
C<Excuse> value could be used to declare that the information we are
storing about a person is missing certain details and why those are
missing, such as because the person left the birthdate field blank on their
application form.  An C<Excuse> is isomorphic to an I<exception> but that
use of the former is not meant to terminate execution of code early unlike
the latter which is.

.Net has a direct C<Excuse> analogy which is provided by the .Net class
C<System.Exception>.

=head2 Excuse_No_Reason

The singleton type value C<Excuse_No_Reason> represents the I<excuse> which
simply says that an ordinary value for any given domain is missing and that
there is simply no excuse that has been given for this; in other words,
something has gone wrong without the slightest hint of an explanation.
This is conceptually the most generic I<excuse> value there is and it can
be used by lazy programmers as a fallback for when they don't have even a
semblance of a better explanation for why an ordinary value is missing.

.Net has a direct C<Excuse_No_Reason> analogy which is provided by C<null>,
and another provided by the .Net singleton class C<System.DBNull>.

For a B<MDBP>-implementing library that natively has a concept of
3-valued logic, specifically a concept like such where the multiplicity of
scenarios that may produce a special no-regular-value-is-here marker do in
fact all produce the exact same marker, C<Excuse_No_Reason> is the official
way to represent that marker.  This includes the I<null> of any common
dialect of SQL.  Whereas, for DBMS libraries that distinguish the reasons
for why a regular value may be missing, C<Excuse_No_Reason> should NOT be
used and instead other more applicable I<excuse> values should instead.

=head2 Excuse_Before_All_Others

The singleton type value C<Excuse_Before_All_Others> represents a
type-agnostic analogy of negative infinity, an I<orderable> value that
sorts I<before> all other values in the type system, and that is its only
meaning.  This value is expressly I<not> meant to represent any specific
mathematical or physical concept of I<infinity> or I<∞>, including those of
the IEEE floating-point standards; such things should be defined separately.

=head2 Excuse_After_All_Others

The singleton type value C<Excuse_After_All_Others> represents a
type-agnostic analogy of positive infinity, an I<orderable> value that
sorts I<after> all other values in the type system, and that is its only
meaning.  This value is expressly I<not> meant to represent any specific
mathematical or physical concept of I<infinity> or I<∞>, including those of
the IEEE floating-point standards; such things should be defined separately.

=head2 Excuse_Div_By_Zero

The singleton type value C<Excuse_Div_By_Zero> represents the I<undefined>
result of attempting to divide a simple number by a simple, unsigned,
number zero.

.Net has a direct C<Excuse_Div_By_Zero> analogy which is provided by
the .Net class C<System.DivideByZeroException>.

=head2 Excuse_Zero_To_The_Zero

The singleton type value C<Excuse_Zero_To_The_Zero> represents the
I<undefined> result of attempting to exponentiate a number zero to the
power of a number zero.

=head2 Excuse_No_Empty_Value

The singleton type value C<Excuse_No_Empty_Value> represents the
I<undefined> result of attempting to request the value with zero members of
some collection type that doesn't have a value with zero members.

=head2 Excuse_No_Such_Ord_Pos

The singleton type value C<Excuse_No_Such_Ord_Pos> represents the
I<undefined> result of attempting to use a member ordinal position I<P> of
C<Array>/etc value I<V> while assuming incorrectly that I<V> already has a
member whose ordinal position is I<P>.

.Net has a direct C<Excuse_No_Such_Ord_Pos> analogy which is provided by
the .Net class C<System.IndexOutOfRangeException>.

=head2 Excuse_No_Such_Attr_Name

The singleton type value C<Excuse_No_Such_Attr_Name> represents the
I<undefined> result of attempting to use an attribute named I<N> of
C<Tuple>/etc value I<V> while assuming incorrectly that I<V> already has an
attribute whose name is I<N>.

.Net has a direct C<Excuse_No_Such_Attr_Name> analogy which is provided by
the .Net class C<System.Collections.Generic.KeyNotFoundException>.

=head2 Excuse_Not_Same_Heading

The singleton type value C<Excuse_Not_Same_Heading> represents the
I<undefined> result of attempting to perform an operation that takes 2
C<Tuple>/etc inputs and requires them to have the same relational
I<heading> but the actual 2 inputs have different headings.

=head1 INTERFACE

The interface of Muldis.DBP.API is entirely
object-oriented; you use it by creating objects from its member classes and
then invoking methods on those objects.  All of their attributes are
private, so you must use accessor methods.

The canonical way to create every API object is to invoke a I<factory>
method, typically on a prior-existing object, and rarely (exactly once in
typical cases) on the name of a I<provider information class>.

The usual way that Muldis.DBP.API indicates a failure is
to throw an exception; most often this is due to invalid input.  If an
invoked routine simply returns, you can assume that it has succeeded, even
if the return value is undefined.

=head1 PACKAGES

The Muldis.DBP.API virtual library includes the following
virtual .Net packages.  Other libraries that implement the B<Muldis DBP>
specification can choose to have a different count of
packages; the important thing is that when one of the following methods is
implemented, any objects created by those methods would have the methods of
their own that they should have.

=head2 Muldis.DBP.API

I<TODO.>

=head2 Muldis.DBP.API.Machine

A C<Machine> object represents a single active instance of a database
management system (DBMS) or virtual machine environment, which is the
widest scope stateful context in which any other database activities
happen.  Other activities meaning the creation or destruction or
association or disassociation with one or more databases, the authoring or
compilation or execution of routines, either to fetch data or manipulate
data, the creation or destruction of database constraints, the management
of transactions, and so on.  A C<Machine> object also represents the global
memory pool of an active DBMS instance, within which all processes and
values and variables live.

A typical .Net application would use exactly one C<Machine> object at a
time and it would tend to be as long-lived as the .Net process itself.
Some libraries implementing B<MDBP> may treat a C<Machine> as a
singleton, so only one such object may exist at a time through which it
manages resources; other implementers may allow several at once, in which
case they should be completely independent.

=head2 Muldis.DBP.API.Value

A C<Value> object represents a single in-DBMS value of the C<Any> type,
meaning both regular constant values as well as mutable C<Handle> values.
A C<Value> object is associated with a specific C<Machine> object, the one
whose C<new_value> method created it.  C<Value> objects are the normal way
to directly share or move data between the DBMS and main .Net environments.
The way to represent an in-DBMS variable with a C<Value> object is to use
a I<value> whose I<data type> is C<Variable>.  The way to represent an
in-DBMS process with a C<Value> object is to use a I<value> whose I<data
type> is C<Process>.

=head1 DIAGNOSTICS

I<This documentation is pending.>

=head1 CONFIGURATION AND ENVIRONMENT

I<This documentation is pending.>

=head1 DEPENDENCIES

As of this time, any relatively recent stable version of .Net is expected
to be able to provide the necessary foundation for .Net code that is able
to speak the B<Muldis DBP> API.  It appears that .Net Framework version 4.0
would be the minimum because it is what introduced the C<BigInteger> type.

=head1 INCOMPATIBILITIES

I<This documentation is pending.>

=head1 SEE ALSO

Go to L<Muldis.DBP> for the majority of both
distribution-internal and external references.

=head1 BUGS AND LIMITATIONS

I<This documentation is pending.>

=head1 AUTHOR

Darren Duncan (C<darren@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the formal specification of the the B<Muldis DBP>
(B<MDBP>) library API for .Net.

MDBP is Copyright © 2015-2017, Muldis Data Systems, Inc.

See the LICENSE AND COPYRIGHT of L<Muldis.DBP> for details.

=head1 ACKNOWLEDGEMENTS

See the ACKNOWLEDGEMENTS of L<Muldis.DBP> for details.

=head1 FORUMS

See the FORUMS of L<Muldis.DBP> for details.

=cut
